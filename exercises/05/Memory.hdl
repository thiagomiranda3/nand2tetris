/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // If bit 14 is 0, the adress is from RAM location
    // Bits between 000 0000 0000 0000 and 011 1111 1111 1111
    Not(in=address[14], out=isRam);
    And(a=isRam, b=load, out=loadRam);
    RAM16K(in=in, load=loadRam, address=address[0..13], out=ram16);
    Mux16(a=false, b=ram16, sel=isRam, out=outRam);

    // If bit 14 is 1 and bit 13 is 0, the adress is from SCREEN location
    // Bits between 100 0000 0000 0000 and 100 1111 1111 1111
    Not(in=address[13], out=notadr13);
    And(a=notadr13, b=address[14], out=isScreen);
    And(a=isScreen, b=load, out=loadScreen);
    Screen(in=in, load=loadScreen, address=address[0..12], out=screen);
    Mux16(a=false, b=screen, sel=isScreen, out=outScreen);

    // If bit 14 and 13 is 1 and all other bits are 0, the address is from KEYBOARD location
    // Bit 110 0000 0000 0000
    And(a=address[13], b=address[14], out=canBeKbd);
    Or8Way(in=address[0..7], out=anyOne07);
    Or8Way(in=address[5..12], out=anyOne512);
    Or(a=anyOne07, b=anyOne512, out=anyOne012);
    Not(in=anyOne012, out=allZero012);
    And(a=canBeKbd, b=allZero012, out=isKbd);
    Keyboard(out=kdb);
    Mux16(a=false, b=kdb, sel=isKbd, out=outKbd);

    Or16(a=outRam, b=outScreen, out=outRamOrScreen);
    Or16(a=outRamOrScreen, b=outKbd, out=out);
}