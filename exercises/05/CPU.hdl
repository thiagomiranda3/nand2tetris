CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // If instruction[15]=0 it is an A-instruction
    // If outAlu[15]= 1 and outAlu[5]=1 it's a C instruction with A register as destination
    And(a=instruction[15], b=instruction[5], out=CinstDestA);
    Mux16(a=instruction, b=outAlu, sel=CinstDestA, out=toRegA);

    Not(in=instruction[15], out=Ainst);
    Or(a=Ainst, b=CinstDestA, out=loadA);
    Register(in=toRegA, load=loadA, out=A, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[3], out=writeM);

    // Second parameter to ALU, can be the memory value or de A register
    Mux16(a=A, b=inM, sel=instruction[12], out=inToAlu);

    // Handler D Register
    And(a=instruction[15], b=instruction[4], out=CinstDestD);
    DRegister(in=outAlu, load=CinstDestD, out=D);

    ALU(x=D, y=inToAlu, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outAlu, out=outM, zr=zr, ng=ng);

    // Handler PC
    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);
    And(a=notNg, b=notZr, out=isPositive);
    
    And(a=isPositive, b=instruction[0], out=JGT);
    And(a=zr, b=instruction[1], out=JEQ);
    And(a=ng, b=instruction[2], out=JLT);
    Or(a=JGT, b=JEQ, out=JGE);
    Or(a=JGE, b=JLT, out=hasJump);
    
    And(a=hasJump, b=instruction[15], out=load);
    Not(in=load, out=inc);

    Mux16(a=outPc, b=A, sel=load, out=inPc);
    PC(in=inPc, load=load, inc=inc, reset=reset, out=outPc, out[0..14]=pc);
}